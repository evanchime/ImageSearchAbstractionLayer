 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var https = require('https');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

// view engine setup
app.set("views", __dirname + "/views");
app.set("view engine", "pug");

app.get('/api/imagesearch/:searchTerm', function (request, response) {
    var endPoint = 'https://cryptic-ridge-9197.herokuapp.com/api/imagesearch/' + 
      request.params.searchTerm + '?offset=' + request.query.offset;
   function callBack(err, data){
      if(err){
        console.error(err.message);
      }
      else{
        response.render('image-search-file', { title: 'Image Search', imageSearch: data})
      }
     return;
   }
    getRequest(endPoint, callBack);
})

app.get('/api/latest/imagesearch/', function (request, response) {
  var endPoint = 'https://cryptic-ridge-9197.herokuapp.com/api/latest/imagesearch/';
  function callBack(err, data){
      if(err){
        console.error(err.message);
      }
      else{
        response.render('recent-search-file', { title: 'Recent Search', recentSearch: data })
      }
     return;
   }
    getRequest(endPoint, callBack);
})

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});


function getRequest(endPoint, callBack){
  https.get(endPoint, (res) => {
      const statusCode  = res.statusCode;
      const contentType = res.headers['content-type'];

      var error;
      if (statusCode !== 200) {
        error = new Error('Request Failed.\n' +
                          `Status Code: ${statusCode}`);
      } else if (!/^application\/json/.test(contentType)) {
        error = new Error('Invalid content-type.\n' +
                          `Expected application/json but received ${contentType}`);
      }
      if (error) {
        callBack(error);
        // consume response data to free up memory
        res.resume();
        return;
      }

      res.setEncoding('utf8');
      var rawData = '';
      res.on('data', (chunk) => { rawData += chunk; });
      res.on('end', () => {
        try {
          const parsedData = JSON.parse(rawData);
          callBack(null,parsedData);
        } catch (e) {
          console.error(e.message);
        }
      });
    }).on('error', (e) => {
      console.error(`Got error: ${e.message}`);
    }); 
}

